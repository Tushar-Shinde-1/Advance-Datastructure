#include<iostream>
using namespace std;

float mtx[10][10];
float costm[10][10];\
int r[10][10];

class obst{
    public:
    int data;
    obst *right;
    obst *left;
    obst()
    {
        right=nullptr;
        left=nullptr;
    }
}* root=nullptr;

void weigh(int i,int j,float unsucc[],float succ[])

{
    float w=0;
    for(int k=i;k<=j;k++)
    {   
       w+=unsucc[k] ;
    }
    for(int k=i+1;k<=j;k++)
    {   
       w+=succ[k] ;
    }
    cout<<"w("<<i<<","<<j<<")="<<w<<endl;
mtx[i][j]=w;

}
void display(int n)
{
    for(int i=0;i<=n;i++)
    {
        for(int j=0;j<=n;j++)
        { 
            cout<<"weight ("<<i<<","<<j<<"):"<<mtx[i][j]<<"     "; 
            cout<<"cost("<<i<<","<<j<<"):"<<costm[i][j]<<"    ";
            cout<<"a("<<i<<","<<j<<"):"<<r[i][j]<<endl;
        }
        cout<<endl;
    }
}
void cost(int i,int j,float unsucc[],float succ[])
{   int a=0;
    if(i==j)
    {
        costm[i][j]=0;
    }
    else{
        float min=1e9;
        for(int k=i+1;k<=j;k++)
    {
        float c=costm[i][k-1]+costm[k][j];
        if(c<min)
        {   
            min=c;
            a=k;
        }
    }

    costm[i][j]=min+mtx[i][j];
    r[i][j]=a;
    }
    cout<<"cost("<<i<<","<<j<<")="<<costm[i][j]<<endl;
}
obst *construct(int i,int j,float arr[])
{
    if(i==j)
    {
        return nullptr;
    }
    int index=r[i][j];
    obst* newnode=new obst();
    newnode->data=arr[index-1];

    newnode->left=construct(i,index-1,arr);
    newnode->right=construct(index+1,j,arr);
    return newnode;
}
int main() {
    int n;
    cout<<"enter total no of keys";
    cin>>n;
    float arr[n];
    cout<<"enter keys";
    for(int i=0;i<n;i++){
    cin>>arr[i];    
    
    }
float succ[n];
    cout<<"enter the successful probabilities";
    for(int i=1;i<=n;i++){
    cin>>succ[i];

    }
    float unsuccess[n+1];
    cout<<"enter the unsuccessful probabilities";
    for(int i=0;i<n+1;i++){
        cout<<"enter unsuccessful probability for "<<i;
        cin>>unsuccess[i];
    }

for(int i=0;i<=n;i++)
{
    for(int j=0;j<=n;j++)
    {
        if(j-i<=n)
        {
           weigh(i,j,unsuccess,succ) ;
          // cost(i,j,unsuccess,succ);
        }
    


    
    }
}




for(int i=0;i<n;i++)
{
    for(int j=0;j<n-i;j++)
    {
        cost(j,j+i+1,unsuccess,succ);
    }
}

display(n);
root=construct(0,n,arr);

}
